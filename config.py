"""
Configuration management for the Greenlighting Agent.
Loads environment variables and provides configuration constants.
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Base directories
BASE_DIR = Path(__file__).parent
OUTPUT_DIR = Path(os.getenv("OUTPUT_DIR", "outputs/reports"))
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

# API Keys
ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")
TMDB_API_KEY = os.getenv("TMDB_API_KEY")

# Validate required keys
if not ANTHROPIC_API_KEY:
    raise ValueError(
        "ANTHROPIC_API_KEY not found in environment. "
        "Please copy .env.example to .env and add your API key."
    )

if not TMDB_API_KEY:
    raise ValueError(
        "TMDB_API_KEY not found in environment. "
        "Please copy .env.example to .env and add your TMDB API key."
    )

# Model Configuration
MODEL_NAME = os.getenv("MODEL_NAME", "claude-sonnet-4-5-20250929")
MAX_TOKENS = int(os.getenv("MAX_TOKENS", "4096"))

# Logging
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")

# Feature Flags
ENABLE_CACHING = os.getenv("ENABLE_CACHING", "true").lower() == "true"

# Rate Limiting
TMDB_RATE_LIMIT = int(os.getenv("TMDB_RATE_LIMIT", "40"))  # per 10 seconds
ANTHROPIC_RATE_LIMIT = int(os.getenv("ANTHROPIC_RATE_LIMIT", "50"))  # per minute

# TMDB API Configuration
TMDB_BASE_URL = "https://api.themoviedb.org/3"
TMDB_IMAGE_BASE_URL = "https://image.tmdb.org/t/p/w500"

# Agent Configuration
MASTER_AGENT_NAME = "Greenlighting Master Orchestrator"
SUBAGENT_TIMEOUT = 120  # seconds

# Context Management
CLAUDE_MD_PATH = BASE_DIR / "CLAUDE.md"

# Report Templates
REPORT_TEMPLATE = """
# Project Greenlighting Analysis Report

**Project:** {project_name}
**Analysis Date:** {analysis_date}
**Analyst:** Greenlighting Agent v1.0

---

## Executive Summary

{executive_summary}

**Recommendation:** {recommendation}
**Confidence Level:** {confidence_level}

---

## Detailed Analysis

{detailed_analysis}

---

## Risk Assessment

{risk_assessment}

---

## Financial Projections

{financial_projections}

---

## Market Analysis

{market_analysis}

---

## Conclusion

{conclusion}

---

*This report was generated by the Movie/TV Project Greenlighting Agent.*
*Always conduct additional due diligence before making production decisions.*
"""

# Slash Commands Configuration
SLASH_COMMANDS = {
    "analyze-script": "Conduct full greenlight analysis",
    "market-research": "Market analysis only",
    "financial-model": "Financial projections",
    "risk-assessment": "Risk analysis",
    "comp-analysis": "Competitive landscape analysis",
    "audience-intel": "Audience intelligence report",
    "help": "Show available commands",
    "exit": "Exit interactive mode"
}

# Budget Categories (for financial modeling)
BUDGET_CATEGORIES = {
    "micro": (0, 1_000_000),
    "low": (1_000_000, 5_000_000),
    "medium": (5_000_000, 25_000_000),
    "high": (25_000_000, 75_000_000),
    "blockbuster": (75_000_000, 200_000_000),
    "tentpole": (200_000_000, float('inf'))
}

# Genre Mappings
GENRE_MAP = {
    28: "Action",
    12: "Adventure",
    16: "Animation",
    35: "Comedy",
    80: "Crime",
    99: "Documentary",
    18: "Drama",
    10751: "Family",
    14: "Fantasy",
    36: "History",
    27: "Horror",
    10402: "Music",
    9648: "Mystery",
    10749: "Romance",
    878: "Science Fiction",
    10770: "TV Movie",
    53: "Thriller",
    10752: "War",
    37: "Western"
}

def get_budget_category(budget: int) -> str:
    """Determine budget category for a given budget amount."""
    for category, (min_budget, max_budget) in BUDGET_CATEGORIES.items():
        if min_budget <= budget < max_budget:
            return category
    return "unknown"

def validate_config():
    """Validate that all required configuration is present."""
    required = {
        "ANTHROPIC_API_KEY": ANTHROPIC_API_KEY,
        "TMDB_API_KEY": TMDB_API_KEY,
    }
    
    missing = [key for key, value in required.items() if not value]
    
    if missing:
        raise ValueError(
            f"Missing required configuration: {', '.join(missing)}. "
            "Please check your .env file."
        )
    
    return True

# Validate on import
validate_config()

print(f"✅ Configuration loaded successfully")
print(f"📁 Output directory: {OUTPUT_DIR}")
print(f"🤖 Model: {MODEL_NAME}")
